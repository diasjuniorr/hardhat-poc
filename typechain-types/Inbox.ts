/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface InboxInterface extends ethers.utils.Interface {
  functions: {
    "getHash(string)": FunctionFragment;
    "ipfsInbox(string)": FunctionFragment;
    "sendIPFS(string,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getHash", values: [string]): string;
  encodeFunctionData(functionFragment: "ipfsInbox", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendIPFS",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipfsInbox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendIPFS", data: BytesLike): Result;

  events: {
    "inboxResponse(string)": EventFragment;
    "ipfsSent(string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "inboxResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ipfsSent"): EventFragment;
}

export type inboxResponseEvent = TypedEvent<[string], { response: string }>;

export type inboxResponseEventFilter = TypedEventFilter<inboxResponseEvent>;

export type ipfsSentEvent = TypedEvent<
  [string, string],
  { _ipfsHash: string; _address: string }
>;

export type ipfsSentEventFilter = TypedEventFilter<ipfsSentEvent>;

export interface Inbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getHash(_address: string, overrides?: CallOverrides): Promise<[string]>;

    ipfsInbox(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    sendIPFS(
      _address: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getHash(_address: string, overrides?: CallOverrides): Promise<string>;

  ipfsInbox(arg0: string, overrides?: CallOverrides): Promise<string>;

  sendIPFS(
    _address: string,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getHash(_address: string, overrides?: CallOverrides): Promise<string>;

    ipfsInbox(arg0: string, overrides?: CallOverrides): Promise<string>;

    sendIPFS(
      _address: string,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "inboxResponse(string)"(response?: null): inboxResponseEventFilter;
    inboxResponse(response?: null): inboxResponseEventFilter;

    "ipfsSent(string,string)"(
      _ipfsHash?: null,
      _address?: null
    ): ipfsSentEventFilter;
    ipfsSent(_ipfsHash?: null, _address?: null): ipfsSentEventFilter;
  };

  estimateGas: {
    getHash(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    ipfsInbox(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sendIPFS(
      _address: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getHash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfsInbox(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendIPFS(
      _address: string,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
